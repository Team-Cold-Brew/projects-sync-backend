package projectSync.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import projectSync.model.Project;
import projectSync.service.ProjectService;

import java.util.List;

/**
 * REST controller for managing {@link Project} resources.
 * This class handles all incoming HTTP requests for the "/api/projects" endpoint.
 */
@RestController
@RequestMapping("api/projects")
public class ProjectController {

    private final ProjectService projectService;

    /**
     * Constructs a ProjectController with the necessary service dependency.
     * Spring's dependency injection will provide an instance of ProjectService.
     *
     * @param projectService The service that contains the business logic for projects.
     */
    @Autowired
    public ProjectController(ProjectService projectService) {
        this.projectService = projectService;
    }

    /**
     * Handles HTTP GET requests to retrieve a list of all projects.
     *
     * @return A {@link List} of {@link Project} objects. This list will be serialized into a JSON array.
     *         Returns an empty list if no projects are found.
     */
    @GetMapping
    public List<Project> findAll() {
        return projectService.findAll();
    }

    /**
     * Handles HTTP POST requests to create a new project.
     *
     * @param project The {@link Project} object to be created, deserialized from the request's JSON body.
     *                The ID of this project should typically be null, as it will be generated by the database.
     * @return The created {@link Project} entity, including its newly generated ID, serialized into JSON.
     */
    @PostMapping
    public Project create(@RequestBody Project project) {
        return projectService.create(project);
    }

    /**
     * Endpoint for partially updating an existing project.
     *
     * @param id The ID of the project to update, extracted from the URL.
     * @param projectUpdates A Project object containing only the fields to be changed.
     * an existing project.
     * @return The complete and updated project.
     */
    @PatchMapping("/{id}")
    public ResponseEntity<Project> updateProject(@PathVariable Long id, @RequestBody Project projectUpdates) {

        Project updatedProject = projectService.update(projectUpdates, id);
        return ResponseEntity.ok(updatedProject);
    }
}
